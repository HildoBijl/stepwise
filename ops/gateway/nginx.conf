events {}

http {
	server {
		listen 80 default_server;
		server_name _;
		location / {
			return 301 https://$host$request_uri;
		}
		location /.well-known/acme-challenge {
			root /acme;
		}
	}

	server {
		listen 443 ssl;
		ssl_certificate /certificates/cert.pem;
		ssl_certificate_key /certificates/key.pem;
		root /www;
		index index.html;
		etag off;
		location /auth/google/login {
			# The Google CSRF cookie is set to the website domain, not to
			# the API domain, so we need to forward the auth callback
			# request to the API.
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Forwarded-Proto https;
			proxy_pass http://api:8080;
		}
		location / {
			include  /etc/nginx/mime.types;
			try_files $uri /index.html;
		}
	}

	server {
		listen 443 ssl;
		ssl_certificate /certificates/cert.pem;
		ssl_certificate_key /certificates/key.pem;
		server_name api.*;
		location /graphql-ws {
			# We use a different endpoint for the websocket in production,
			# in order to set additional headers which are needed to upgrade
			# the connection. We donâ€™t want those headers on other endpoints.
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Forwarded-Proto https;
			proxy_pass http://api:8080/graphql;
		}
		location / {
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_set_header X-Forwarded-Proto https;
			proxy_pass http://api:8080;
		}
	}
}
