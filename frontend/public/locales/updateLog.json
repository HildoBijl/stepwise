{
  "en": {
    "eduContent/mathematics/algebra/expressions/brackets/pullFactorOutOfBrackets": {
      "theory.intro": {
        "oldText": "<par>We know how to calculate a multiplication like <inline-math/>. But what do we do with something like <inline-math/>? The answer is: we can rewrite this by <term>expanding brackets</term>.</par>",
        "firstUpdate": "2024-08-23T12:45:23.560Z",
        "latestUpdate": "2024-08-23T13:06:44.158Z",
        "latestText": "<par>We know how to expand brackets, rewriting <inline-math/> as <inline-math/>. But can we also do the opposite? How do we <term>pull a factor out of brackets</term>? There is a slightly long procedure that always works, but afterwards we also look at a short-cut you can take.</par>"
      },
      "theory.rule": {
        "oldText": "<head>The rule</head><par>If we have a number multiplication, like for instance <inline-math/>, then we can visualize this multiplication using blocks.</par><block-drawing/><par>From this, we see that <inline-math/> can be rewritten to <inline-math/>. Check for yourself: both result into <inline-math/>.</par><par>This works exactly the same if we have an expression like <inline-math/>. Here, <inline-math/>, <inline-math/> and <inline-math/> can be any type of expression, like <inline-math/> or anything similar. We can again visualize this.</par><block-drawing/><par>From this visualization, we see that we may rewrite <inline-math/> to <inline-math/>. We call this <term>expanding the brackets</term>. The accompanying rule is <block-math/> Note that we multiply the factor outside of the brackets (here <inline-math/>) separately with each of the terms inside the brackets (here <inline-math/> and <inline-math/>).</par>",
        "firstUpdate": "2024-08-23T12:45:23.560Z",
        "latestUpdate": "2024-08-23T12:56:38.252Z",
        "latestText": "<head>The rule</head><par>We start with an expression like <inline-math/> and we know that we want to pull a <term>factor</term> <inline-math/> outside of the brackets. The result should of course still be equal to the original expression. So the first step is to write it as <block-math/> For our example, this means that we initially write <block-math/> Note that dividing by <inline-math/> and subsequently multiplying by it leaves the expression unchanged, so both sides must be the same.</par><par>The next step is to simplify the fraction within the brackets. First we can use the rules of <skill-link>merging/splitting like fractions</skill-link> to split up the fraction, getting <block-math/> Next, we can <skill-link>simplify each of the resulting fractions</skill-link> by canceling fraction factors, giving <block-math/>. All together, the final outcome is <block-math/> Note that we can also check if we have done everything correctly. If we expand the brackets on the right using the default rules to <skill-link>expand brackets</skill-link>, we indeed see that we wind up with the original expression. That means we did not make a mistake.</par>"
      },
      "theory.steps": {
        "oldText": "<head>The steps</head><par>To expand brackets, like for instance with <inline-math/>, take the following steps.</par><list><item><a>Multiply the factor outside of the brackets separately with each term inside the brackets. So <inline-math/> becomes <inline-math/>.</a></item><item><b>For each of the resulting terms, <skill-link>simplify any potential number multiplications</skill-link>. So <inline-math/> becomes <inline-math/> and <inline-math/> becomes <inline-math/>.</b></item><item><c>Also <skill-link>merge any multiplications of equal factors into powers</skill-link>. So <inline-math/> becomes <inline-math/>.</c></item></list><par>The final result <inline-math/> is as easy as you can possibly write it.</par>",
        "firstUpdate": "2024-08-23T12:45:23.560Z",
        "latestUpdate": "2024-08-23T13:06:16.134Z",
        "latestText": "<head>The steps</head><par>To pull a factor out of brackets, like when pulling <inline-math/> out of <inline-math/>, take the following steps.</par><list><item><a>Start by writing down <inline-math/>. For our example we hence write <inline-math/>.</a></item><item><b>Split the fraction inside the brackets up into multiple fractions using the default rules for <skill-link>merging/splitting fractions</skill-link>. For the example we hence get <inline-math/>.</b></item><item><c><skill-link>Simplify all fractions</skill-link> within the brackets, canceling factors where possible. This turns our example into <inline-math/>.</c></item><item><d>Check your result by <skill-link>expanding the brackets</skill-link> in your final result. You should wind up with exactly what you started with. And indeed, if we expand the brackets for <inline-math/> then we get <inline-math/>.</d></item></list><par>Note that there are short-cuts that directly get you the required result, if you have the insights to use them properly.</par>"
      },
      "meta.learningGoals": {
        "oldText": "<par>In this skill you learn to <term>pull a factor out of brackets</term>. If you see an expression like <inline-math/> you will be able to pull a factor <inline-math/> and a factor <inline-math/> out of brackets to wind up with <inline-math/>. This includes understanding the reasoning behind why this works: writing the expression as a fraction and subsequently splitting the fraction and simplifying the result. The skill does not include recognizing which factor would be wise to pull out of the brackets.</par>",
        "firstUpdate": "2024-08-23T12:45:23.560Z",
        "latestUpdate": "2024-08-23T12:45:23.576Z",
        "latestText": "<par>In this skill you learn to <term>pull a factor out of brackets</term>. If you see an expression like <inline-math/> you will be able to pull a factor <inline-math/> and a factor <inline-math/> out of brackets to wind up with <inline-math/>. This includes understanding the reasoning behind why this works: writing the expression as a fraction and subsequently splitting the fraction and simplifying the result. The skill does not include recognizing which factor would be wise to pull out of the brackets.</par>"
      },
      "theory.idea": {
        "oldText": "<head>The idea</head><par>We start with an expression like <inline-math/> and we know that we want to pull a <term>factor</term> <inline-math/> outside of the brackets. The result should of course still be equal to the original expression. So the first step is to write it as <block-math/> For our example, this means that we initially write <block-math/> Note that dividing by <inline-math/> and subsequently multiplying by it leaves the expression unchanged, so both sides must be the same.</par><par>The next step is to simplify the fraction within the brackets. First we can use the rules of <skill-link>merging/splitting like fractions</skill-link> to split up the fraction, getting <block-math/> Next, we can <skill-link>simplify each of the resulting fractions</skill-link> by canceling fraction factors, giving <block-math/> All together, the final outcome is <block-math/> Note that we can also check if we have done everything correctly. If we expand the brackets on the right using the default rules to <skill-link>expand brackets</skill-link>, we indeed see that we wind up with the original expression. That means we did not make a mistake.</par>",
        "firstUpdate": "2024-08-23T13:04:48.543Z",
        "latestUpdate": "2024-08-23T13:11:04.560Z",
        "latestText": "<head>The idea</head><par>Suppose that we have an expression like <inline-math/> and we want to pull a <term>factor</term> <inline-math/> out of the brackets. The first step is to write it as <block-math/> For our example, this means that we initially write <block-math/> Note that dividing the original expression by <inline-math/> and subsequently multiplying by it leaves it unchanged, so both sides of the equation must be the same.</par><par>The fraction within the brackets can be simplified. First we can use the rules of <skill-link>merging/splitting like fractions</skill-link> to split up the fraction, getting <block-math/> Next, we can <skill-link>simplify each of the resulting fractions</skill-link> by canceling fraction factors, giving <block-math/> All together, the final outcome is <block-math/> At the end we can check if we have done everything correctly by <skill-link>expanding the brackets</skill-link>. When we do, we should wind up with the original expression, which is indeed the case for our example. That means we did not make a mistake.</par>"
      },
      "theory.shortCut": {
        "oldText": "<head>The short-cut</head><par>The above procedure with a fraction always works, but often it is a bit elaborate. In practice, it can be done faster.</par><par>The idea here is that we know we will wind up with an expression of the form <block-math/> We only have to figure out what comes on the place of the dots. The first dots should be something that, when multiplied by <inline-math/>, becomes <inline-math/>. With some experience we directly see that this is <inline-math/>. Similarly, the second set of dots should be something that, when multiplied by <inline-math/>, becomes <inline-math/>. We can once more realize that this is <inline-math/>. In this way do we directly wind up with <block-math/> If you have enough experience to apply this short-cut, you are of course welcome to do so.</par>",
        "firstUpdate": "2024-08-23T13:04:48.543Z",
        "latestUpdate": "2024-08-23T13:12:02.212Z",
        "latestText": "<head>The short-cut</head><par>The above procedure with a fraction always works, but often it is a bit elaborate. In practice, it can be done faster. The idea is that we know we will wind up with an expression of the form <block-math/> We only have to figure out what comes on the place of the dots. The first set of dots should be something that, when multiplied by <inline-math/>, becomes <inline-math/>. With some experience we directly see that this is <inline-math/>. Similarly, the second set of dots should be something that, when multiplied by <inline-math/>, becomes <inline-math/>. We can once more realize that this is <inline-math/>. In this way, we directly wind up with <block-math/> If you have enough experience to apply this short-cut, you are of course welcome to do so.</par>"
      }
    }
  }
}